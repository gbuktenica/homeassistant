esphome:
  name: ${device_name}
esl8266:
  board: modwifi

i2c:
  sda: GPIO12
  scl: GPIO14

switch:
  - platform: gpio
    pin: GPIO4
    name: "Relay #1"
    internal: true
    id: relay1
    interlock: &interlock_group [relay1, relay2]

  - platform: gpio
    pin: GPIO15
    name: "Relay #2"
    internal: true
    id: relay2
    interlock: *interlock_group

binary_sensor:
  - platform: gpio
    pin: GPIO13
    name: "Switch #1"
    internal: true
    id: switch1
    on_press:
      then:
        # logic for cycling through movements: open->stop
        - lambda: |
            if (id(blind).current_operation == COVER_OPERATION_IDLE) {
              // Cover is idle
              id(blind).make_call().set_command_open().perform();
            } else {
              // Cover is opening / closing. Stop it.
              id(blind).make_call().set_command_stop().perform();
            }

  - platform: gpio
    pin: GPIO5
    name: "Switch #2"
    internal: true
    id: switch2
    on_press:
      then:
        # logic for cycling through movements: open->stop
        - lambda: |
            if (id(blind).current_operation == COVER_OPERATION_IDLE) {
              // Cover is idle
              id(blind).make_call().set_command_close().perform();
            } else {
              // Cover is opening / closing. Stop it.
              id(blind).make_call().set_command_stop().perform();
            }
cover:
  - platform: time_based
    device_class: shade
    name: "${friendly_name}"
    id: blind

    open_action:
      - switch.turn_on: ${open_relay}
    open_duration: ${open_duration}

    close_action:
      - switch.turn_on: ${close_relay}
    close_duration: ${close_duration}

    stop_action:
      - switch.turn_off: ${open_relay}
      - switch.turn_off: ${close_relay}
    has_built_in_endstop: True