substitutions:
  device_name: lounge-day-s25
  friendly_name: Day Blind
  open_duration: 39sec
  close_duration: 37sec
  ip: "10.4.4.40"
  ssid: IoTL1
  board: modwifi
  pin_relay1: GPIO4
  pin_switch2n: GPIO5
  pin_sda: GPIO12
  pin_switch1n: GPIO13
  pin_scl: GPIO14
  pin_relay2: GPIO15
  open_switch: switch1
  open_relay: relay2
  close_switch: switch2
  close_relay: relay1
#####################################
esphome:
  name: ${device_name}
  platform: ESP8266
  board: ${board}

wifi:
  ssid: ${ssid}
  password: !secret iot
  fast_connect: on
  use_address: ${ip}
  manual_ip:
    static_ip: ${ip}
    gateway: 10.4.4.1
    subnet: 255.255.255.0

  # Enable fallback hotspot  in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: !secret iot
    manual_ip:
      static_ip: 192.168.100.2
      gateway: 192.168.100.1
      subnet: 255.255.255.0

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api

ota:
  password: !secret iot

time:
  - platform: homeassistant
    id: homeassistant_time
#####################################
i2c:
  sda: ${pin_sda}
  scl: ${pin_scl}

switch:
  - platform: gpio
    pin: ${pin_relay1}
    name: "Relay #1"
    internal: true
    id: relay1
    interlock: &interlock_group [relay1, relay2]

  - platform: gpio
    pin: ${pin_relay2}
    name: "Relay #2"
    internal: true
    id: relay2
    interlock: *interlock_group

binary_sensor:
  - platform: gpio
    pin: ${pin_switch1n}
    name: "Switch #1"
    internal: true
    id: switch1
    on_press:
      then:
        # logic for cycling through movements: open->stop
        - lambda: |
            if (id(blind).current_operation == COVER_OPERATION_IDLE) {
              // Cover is idle
              id(blind).open();
            } else {
              // Cover is opening / closing. Stop it.
              id(blind).stop();
            }

  - platform: gpio
    pin: ${pin_switch2n}
    name: "Switch #2"
    internal: true
    id: switch2
    on_press:
      then:
        # logic for cycling through movements: open->stop
        - lambda: |
            if (id(blind).current_operation == COVER_OPERATION_IDLE) {
              // Cover is idle
              id(blind).close();
            } else {
              // Cover is opening / closing. Stop it.
              id(blind).stop();
            }
cover:
  - platform: time_based
    device_class: shade
    name: "${friendly_name}"
    id: blind

    open_action:
      - switch.turn_on: ${open_relay}
    open_duration: ${open_duration}

    close_action:
      - switch.turn_on: ${close_relay}
    close_duration: ${close_duration}

    stop_action:
      - switch.turn_off: ${open_relay}
      - switch.turn_off: ${close_relay}
    has_built_in_endstop: True