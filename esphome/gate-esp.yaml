substitutions:
  device_name: gate-esp
  channel_1: "vehicle"
  channel_2: "pedestrian"
  channel_3: "tesla_gate"
  channel_4: "gate_led"
  ip: "10.4.4.44"
  use_ip: ${ip}
  ssid: IoTG
  # https://esphome.io/devices/nodemcu_esp32.html
  # https://github.com/wernerhp/esphome/blob/main/centurion-d5-evo/centurion-d5-evo.yaml
#######################
esphome:
  name: ${device_name}
esp32:
  board: nodemcu-32s

packages:
  common_base: !include common/base.yaml
#####################################
output:
  - platform: gpio
    id: ${channel_1}output
    pin: GPIO2
  - platform: gpio
    id: ${channel_2}output
    pin: GPIO0

button:
  - platform: output
    id: ${channel_1}button
    name: ${channel_1} button
    output: ${channel_1}output
    duration: 500ms
  - platform: output
    id: ${channel_2}button
    name: ${channel_2} button
    output: ${channel_2}output
    duration: 500ms

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO23
      mode:
        input: true
        pullup: true
    name: ${channel_3}
    device_class: GARAGE_DOOR
    filters:
      - delayed_on: 10ms
  - platform: gpio
    pin:
      number: GPIO22
      mode:
        input: true
    id: status_led
    name: ${channel_4}
    entity_category: diagnostic
    icon: mdi:led-outline
    disabled_by_default: true
    publish_initial_state: true
    filters:
        delayed_on_off: 100ms
    on_multi_click:
      - timing: # Closed
          - OFF for at least 2000ms
        then:
          - logger.log: "Closed"
          - text_sensor.template.publish:
              id: status
              state: "Closed"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Open
          - ON for at least 2000ms
        then:
          - logger.log: "Open"
          - text_sensor.template.publish:
              id: status
              state: "Open"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Closing
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        then:
          - logger.log: "Closing"
          - text_sensor.template.publish:
              id: status
              state: "Closing"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_CLOSING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Opening
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
        then:
          - logger.log: "Opening"
          - text_sensor.template.publish:
              id: status
              state: "Opening"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_OPENING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Pillar light override
          - ON for 200ms to 300ms
          - OFF for 1700ms to 1800ms
        then:
          - logger.log: "Pillar light override"
          - text_sensor.template.publish:
              id: status
              state: "Pillar light override"
        invalid_cooldown: 100ms

      - timing: # No Mains
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 1200ms to 1400ms
        then:
          - logger.log: "No Mains"
          - text_sensor.template.publish:
              id: status
              state: "No Mains"
        invalid_cooldown: 100ms

      - timing: # Battery Low
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 500ms to 1000ms
        then:
          - logger.log: "Low Battery"
          - text_sensor.template.publish:
              id: status
              state: "Low Battery"
        invalid_cooldown: 100ms

cover:
  - platform: template
    name: "Gate"
    device_class: gate
    id: gate
    lambda: |-
      if (id(status).state == "Open") {
        return COVER_OPEN;
      } else if (id(status).state == "Closed") {
        return COVER_CLOSED;
      } else {
        return {};
      }
    open_action:
      - if:
          condition:
            lambda: 'return id(status).state == "Closed";'
          then:
            - button.press: ${channel_1}button
          else:
            - if:
                condition:
                  lambda: 'return id(status).state == "Closing";'
                then:
                  - button.press: ${channel_1}button
                  - delay: 400ms
                  - button.press: ${channel_1}button
                else:
                  - logger.log: "Gate is not in closed or closing state, cannot open"
    close_action:
      - if:
          condition:
            lambda: 'return id(status).state == "Open
          then:
            - button.press: ${channel_1}button
          else:
            - if:
                condition:
                  lambda: 'return id(status).state == "Opening";'
                then:
                  - button.press: ${channel_1}button
                  - delay: 400ms
                  - button.press: ${channel_1}button
                else:
                  - logger.log: "Gate is not in open or opening state, cannot close"
    stop_action:
      - if:
          condition:
            or:
              - lambda: 'return id(status).state == "Opening";'
              - lambda: 'return id(status).state == "Closing";'
          then:
            - button.press: ${channel_1}button
          else:
            - logger.log: "Gate is not moving, cannot stop"
    optimistic: false

text_sensor:
  - platform: template
    icon: mdi:information-outline
    id: status
    name: "Status"