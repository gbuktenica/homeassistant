substitutions:
  device_name: coffee-1pm
  channel_1: "Coffee"
  ip: "10.4.4.31"
  use_ip: ${ip}
  ssid: IoTL1
  calibrate: "15000 -> 1400"
  update_interval: 15s
#######################
packages:
  common_base: !include common/base.yaml
  device_base: !include common/esp01_1m.yaml
#####################################
sensor:
  - platform: hlw8012
    id: sensor_id
    update_interval: ${update_interval}
    sel_pin:
      number: GPIO3
      inverted: True
    cf_pin: GPIO5 #5
    cf1_pin: GPIO14 #14
    current_resistor: 0.001 #The value of the shunt resistor for current measurement. Defaults to the Sonoff POW's value 0.001 ohm. Verified on https://fccid.io/2ANOO-SM800/Internal-Photos/Internal-Photos-3601477 that we use "R001" = 0.001 ohm
    voltage_divider: 4600 #The value of the voltage divider on the board as (R_upstream + R_downstream) / R_downstream. Defaults to the Sonoff POW's value 2351. From the pic we use 2x "125" = 2x 1.2 M ohm for R_upstream and "102" = 1 k ohm for R_downstream, so (1,200,000+1,200,000+1,000)/1,000 = 2401
    # but those don't fix the measurement values, probably because we actually have a BL0937 chip instead of a HLW8012, (and part variance as well) so we have to manually calibrate with a known load or a load and a Kill-A-Watt type meter. My values used below will only be +/-10% of yours I think.
    power:
      name: ${channel_1} Power
      unit_of_measurement: W
      id: power_channel_1
      icon: mdi:flash-circle
      filters:
        - calibrate_linear:
            - 0.0 -> 0.0
            - ${calibrate}
        - lambda: if (x < (10 + 1)) return 0; else return (x - 1);

  - platform: total_daily_energy
    name: ${channel_1} Energy
    power_id: power_channel_1
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

switch:
  - platform: gpio
    name: ${channel_1} Machine
    icon: "mdi:coffee-maker"
    pin: GPIO15
    id: relay
    # on_turn_on:
    #   - lambda: |-
    #       id(sensor_id).set_update_interval(5s);
    # on_turn_off:
    #   - lambda: |-
    #       id(sensor_id).set_update_interval(300000);

binary_sensor:
  # Binary sensor for the button press
  - platform: gpio
    name: ${channel_1} Button
    pin:
      number: GPIO4
      inverted: true
    on_press:
      - switch.toggle: relay
